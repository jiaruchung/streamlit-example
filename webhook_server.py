import os
import stripe
from fastapi import FastAPI, Request, HTTPException
from dotenv import load_dotenv
from fpdf import FPDF
import sendgrid
from sendgrid.helpers.mail import Mail

load_dotenv()
stripe.api_key = os.getenv("STRIPE_SECRET_KEY")
endpoint_secret = os.getenv("STRIPE_WEBHOOK_SECRET")
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")

app = FastAPI()

@app.post("/webhook")
async def stripe_webhook(request: Request):
    payload = await request.body()
    sig_header = request.headers.get("stripe-signature")

    try:
        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)
    except stripe.error.SignatureVerificationError:
        raise HTTPException(status_code=400, detail="Invalid signature")

    # üéâ Payment completed
    if event["type"] == "checkout.session.completed":
        session = event["data"]["object"]
        customer_email = session["customer_details"]["email"]
        print(f"‚úÖ Payment received from: {customer_email}")

        # üöÄ Generate and send report
        generate_and_send_report(customer_email)

    return {"status": "ok"}


def generate_and_send_report(email):
    print(f"üìÑ Generating report for {email}...")

    # --- 1. Generate PDF ---
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Your UX Report", ln=True, align="C")
    pdf.multi_cell(0, 10, txt="\nThank you for your purchase! Here's a sample UX report generated by our system.\n\n- Clarity: 4/5\n- Cognitive Load: 2/5\n- Suggestions: Simplify sentences, remove jargon, and increase whitespace.")
    pdf.output("report.pdf")

    # --- 2. Send via SendGrid ---
    sg = sendgrid.SendGridAPIClient(api_key=SENDGRID_API_KEY)
    message = Mail(
        from_email="noreply@yourdomain.com",
        to_emails=email,
        subject="Your Full UX Report",
        html_content="<p>Hi there,</p><p>Your full UX report is attached. Thanks for supporting inclusive design!</p>"
    )

    with open("report.pdf", "rb") as f:
        message.add_attachment(
            f.read(),
            maintype='application',
            subtype='pdf',
            filename='UX_Report.pdf'
        )

    try:
        sg.send(message)
        print(f"üì¨ Report sent to {email}")
    except Exception as e:
        print(f"‚ùå Failed to send email: {e}")

